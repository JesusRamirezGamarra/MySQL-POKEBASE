/****************************************************************************************
Litado de store Procedure : 
------------------------------------------------------------------------------
    (1) fn_game_edition :  name of pokemon edition by number of pokemon parameter
        # Goal : 	obtain of pokemon edition
        # Table :   nothing
        # Database: poke 
        # Return :   game_edition ( name of pokemon edition ) 
        # Order By : Nothing                     
        # Test :    SELECT fn_game_edition (1);
------------------------------------------------------------------------------
    (2) fn_attack_against :  maximun attack point for pokemon have by pokemon type
        # Goal : 	obtain the maximun attack point for pokemon 
        # Table :   pokemons
					statistics
					pokemon_movement_per_pokemons
					pokemon_per_pokemon_types
					pokemon_types                    
        # Database: poke 
        # Return :  fn_attack_against ( maximum point attacks by pokemon per pokemon types )
        # Order By : Nothing                     
        # Test :     SELECT fn_attack_against (1,12);
------------------------------------------------------------------------------
    (3) fn_calculate_Age :  
        # Goal : 	
        # Table :   
                    
        # Database: poke 
        # Return : 	
        # Order By : Nothing                     
        # Test :    SELECT fn_calculate_Age('2000-05-14');
-----------------------------------------------------------------------------------------
    (4) fn_pokemon_count :  count of pokemons by generation parameter
        # Goal : 	obtain amount of pokemon by generation
        # Table :   
                    
        # Database: poke 
        # Return :  
        # Order By : Nothing                     
        # Test :   SELECT fn_pokemon_count(3);
****************************************************************************************/
USE poke;

DROP FUNCTION IF EXISTS fn_game_edition;
DELIMITER $$
CREATE FUNCTION IF NOT EXISTS fn_game_edition (generation smallint) 
RETURNS VARCHAR(20)
NO SQL
BEGIN
    DECLARE game_edition VARCHAR(20);
    SET game_edition = 'UNDEFINED';
    IF generation > 6 THEN            SET game_edition = 'PLATINUM';
    ELSEIF generation >= 5  THEN      SET game_edition = 'GOLD';
    ELSEIF generation >= 4  THEN      SET game_edition = 'SILVER';
    ELSEIF generation >= 3  THEN      SET game_edition = 'YELLOW';
    ELSEIF generation >= 2  THEN      SET game_edition = 'RED';
    ELSEIF generation >= 1  THEN      SET game_edition = 'BLUE';
    END IF;
	RETURN game_edition;
END
$$ DELIMITER ;

DROP FUNCTION IF EXISTS fn_attack_against;
DELIMITER $$
CREATE FUNCTION IF NOT EXISTS fn_attack_against(id_pokemon_attack smallint, id_pokemon_receive smallint ) 
RETURNS SMALLINT
READS SQL DATA 
DETERMINISTIC
BEGIN
       SET @against_total = (
           SELECT   CEIL(max(
                        (   s.attack  * 
                           CASE WHEN t.name = 'bug' THEN m.against_bug
                                WHEN t.name = 'dark' THEN m.against_dark
                                WHEN t.name = 'dragon' THEN m.against_dragon
                                WHEN t.name = 'electric' THEN m.against_electric
                                WHEN t.name = 'fairy' THEN m.against_fairy
                                WHEN t.name = 'fighting' THEN m.against_fight
                                WHEN t.name = 'fire' THEN m.against_fire
                                WHEN t.name = 'flying' THEN m.against_flying
                                WHEN t.name = 'ghost' THEN m.against_ghost
                                WHEN t.name = 'grass' THEN m.against_grass
                                WHEN t.name = 'ground' THEN m.against_ground
                                WHEN t.name = 'ice' THEN m.against_ice
                                WHEN t.name = 'normal' THEN m.against_normal
                                WHEN t.name = 'poison' THEN m.against_poison
                                WHEN t.name = 'psychic' THEN m.against_psychic
                                WHEN t.name = 'rock' THEN m.against_rock
                                WHEN t.name = 'steel' THEN m.against_steel
                                WHEN t.name = 'water' THEN m.against_water
                            END 
                        )
                        -  s.defense 
					) ) as maximun_attack
            FROM pokemons p 
            INNER JOIN statistics s  ON p.id_pokemon = s.id_pokemon 
            INNER JOIN pokemon_movement_per_pokemons m ON m.id_pokemon = s.id_pokemon
            INNER JOIN pokemon_per_pokemon_types ppt ON ppt.id_pokemon = id_pokemon_receive
            INNER JOIN pokemon_types t ON ppt.id_pokemon_type = t.id_pokemon_type
            WHERE p.id_pokemon = id_pokemon_attack
        );
    RETURN @against_total;
    
END
$$ DELIMITER ;

DROP FUNCTION IF EXISTS fn_calculate_Age;
DELIMITER $$
CREATE FUNCTION IF NOT EXISTS fn_calculate_Age ( Age date    )
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE TodayDate DATE;
    SELECT CURRENT_DATE() INTO TodayDate;
    RETURN YEAR(TodayDate) - YEAR(Age);
END$$
DELIMITER ;

DROP FUNCTION IF EXISTS fn_pokemon_count;
DELIMITER $$
CREATE FUNCTION fn_pokemon_count(generation smallint) 
RETURNS INTEGER
DETERMINISTIC READS SQL DATA
BEGIN
    DECLARE result INTEGER;
    
    SELECT COUNT(*)
        INTO result
    FROM pokemons p
    WHERE p.generation = generation
    GROUP BY p.generation;

    RETURN result;
END$$
DELIMITER ;



SELECT fn_game_edition (1);
SELECT fn_attack_against (1,12);
SELECT fn_calculate_Age('2000-05-14');
SELECT fn_pokemon_count(3);


